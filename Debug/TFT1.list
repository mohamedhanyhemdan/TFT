
TFT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c54  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007fb8  08000d84  08000d84  00001d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d3c  08008d3c  00009d44  2**0
                  CONTENTS
  4 .ARM          00000000  08008d3c  08008d3c  00009d44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d3c  08008d44  00009d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00009d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08008d44  0000a000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08008d44  0000a024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009d44  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d62  00000000  00000000  00009d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000603  00000000  00000000  0000aacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  0000b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013b  00000000  00000000  0000b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012bc  00000000  00000000  0000b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012bc  00000000  00000000  0000c68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000431e  00000000  00000000  0000d94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011c69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005dc  00000000  00000000  00011cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000002d  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d6c 	.word	0x08000d6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d6c 	.word	0x08000d6c

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <TFT_voidInit>:
};



void TFT_voidInit()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	/*Reset Pulse*/
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 8000670:	2201      	movs	r2, #1
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f985 	bl	8000984 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 800067a:	491e      	ldr	r1, [pc, #120]	@ (80006f4 <TFT_voidInit+0x88>)
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f000 fa9f 	bl	8000bc0 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f97c 	bl	8000984 <GPIO_voidSetPinValue>
	STK_delay(1,US_UNIT);
 800068c:	4919      	ldr	r1, [pc, #100]	@ (80006f4 <TFT_voidInit+0x88>)
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fa96 	bl	8000bc0 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f973 	bl	8000984 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 800069e:	4915      	ldr	r1, [pc, #84]	@ (80006f4 <TFT_voidInit+0x88>)
 80006a0:	2064      	movs	r0, #100	@ 0x64
 80006a2:	f000 fa8d 	bl	8000bc0 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f96a 	bl	8000984 <GPIO_voidSetPinValue>
	STK_delay(100,US_UNIT);
 80006b0:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <TFT_voidInit+0x88>)
 80006b2:	2064      	movs	r0, #100	@ 0x64
 80006b4:	f000 fa84 	bl	8000bc0 <STK_delay>
	GPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2101      	movs	r1, #1
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f961 	bl	8000984 <GPIO_voidSetPinValue>
	STK_delay(120,MS_UNIT);
 80006c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c6:	2078      	movs	r0, #120	@ 0x78
 80006c8:	f000 fa7a 	bl	8000bc0 <STK_delay>

	/*sleep out command*/
	voidWriteCommand(TFT_SLEEP_OUT_CMD);
 80006cc:	2011      	movs	r0, #17
 80006ce:	f000 f85d 	bl	800078c <voidWriteCommand>
	STK_delay(150,MS_UNIT);
 80006d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006d6:	2096      	movs	r0, #150	@ 0x96
 80006d8:	f000 fa72 	bl	8000bc0 <STK_delay>

	/*color mode command*/
	voidWriteCommand(TFT_COLOR_MODE_CMD);
 80006dc:	203a      	movs	r0, #58	@ 0x3a
 80006de:	f000 f855 	bl	800078c <voidWriteCommand>
	voidWriteData(TFT_RGB_565);
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 f864 	bl	80007b0 <voidWriteData>

	/*Display On command*/
	voidWriteCommand(TFT_DISPLAY_ON_CMD);
 80006e8:	2029      	movs	r0, #41	@ 0x29
 80006ea:	f000 f84f 	bl	800078c <voidWriteCommand>

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	000f4240 	.word	0x000f4240

080006f8 <TFT_voidDisplayImage>:

void TFT_voidDisplayImage(const u16* Image)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	u16 counter;
	u8 Data;
	/*Set X address*/
	voidWriteCommand(TFT_SET_X_ADDR_CMD);
 8000700:	202a      	movs	r0, #42	@ 0x2a
 8000702:	f000 f843 	bl	800078c <voidWriteCommand>
	/*Start*/
	voidWriteData(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f852 	bl	80007b0 <voidWriteData>
	voidWriteData(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f84f 	bl	80007b0 <voidWriteData>
	/*End*/
	voidWriteData(0);
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f84c 	bl	80007b0 <voidWriteData>
	voidWriteData(127);
 8000718:	207f      	movs	r0, #127	@ 0x7f
 800071a:	f000 f849 	bl	80007b0 <voidWriteData>

	/*Set Y address*/
	voidWriteCommand(TFT_SET_Y_ADDR_CMD);
 800071e:	202b      	movs	r0, #43	@ 0x2b
 8000720:	f000 f834 	bl	800078c <voidWriteCommand>
	/*Start*/
	voidWriteData(0);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f843 	bl	80007b0 <voidWriteData>
	voidWriteData(0);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f840 	bl	80007b0 <voidWriteData>
	/*End*/
	voidWriteData(0);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f83d 	bl	80007b0 <voidWriteData>
	voidWriteData(159);
 8000736:	209f      	movs	r0, #159	@ 0x9f
 8000738:	f000 f83a 	bl	80007b0 <voidWriteData>


	/*RAM writ*/
	voidWriteCommand(TFT_RAM_WRITE_CMD);
 800073c:	202c      	movs	r0, #44	@ 0x2c
 800073e:	f000 f825 	bl	800078c <voidWriteCommand>

	for (counter= 0; counter< 20480; counter ++)
 8000742:	2300      	movs	r3, #0
 8000744:	81fb      	strh	r3, [r7, #14]
 8000746:	e018      	b.n	800077a <TFT_voidDisplayImage+0x82>
	{
		Data = Image[counter] >> 8;
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	737b      	strb	r3, [r7, #13]

		/* Write the high byte */
		voidWriteData(Data);
 8000758:	7b7b      	ldrb	r3, [r7, #13]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f828 	bl	80007b0 <voidWriteData>
		/* Write the low byte */
		Data = Image[counter] & 0x00ff;
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	737b      	strb	r3, [r7, #13]
		voidWriteData(Data);
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f81e 	bl	80007b0 <voidWriteData>
	for (counter= 0; counter< 20480; counter ++)
 8000774:	89fb      	ldrh	r3, [r7, #14]
 8000776:	3301      	adds	r3, #1
 8000778:	81fb      	strh	r3, [r7, #14]
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000780:	d3e2      	bcc.n	8000748 <TFT_voidDisplayImage+0x50>
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <voidWriteCommand>:


/*****************************Private Functions***************************************/

static void voidWriteCommand(u8 Command)
		{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
		GPIO_voidSetPinValue(TFT_CMD_DATA_PIN,GPIO_LOW);
 8000796:	2200      	movs	r2, #0
 8000798:	2102      	movs	r1, #2
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f8f2 	bl	8000984 <GPIO_voidSetPinValue>
		SPI_Send(Command);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f9de 	bl	8000b64 <SPI_Send>
		}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <voidWriteData>:

static void voidWriteData(u8 Data)
		{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
		GPIO_voidSetPinValue(TFT_CMD_DATA_PIN,GPIO_HIGH);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f8e0 	bl	8000984 <GPIO_voidSetPinValue>
		SPI_Send(Data);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f9cc 	bl	8000b64 <SPI_Send>
		}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <GPIO_voidSetPinDirection>:


#include "GPIO_interface.h"

void GPIO_voidSetPinDirection( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Mode)
	{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	460b      	mov	r3, r1
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	4613      	mov	r3, r2
 80007e4:	717b      	strb	r3, [r7, #5]
			switch (copy_u8PORT)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d07a      	beq.n	80008e2 <GPIO_voidSetPinDirection+0x10e>
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	f300 80b1 	bgt.w	8000954 <GPIO_voidSetPinDirection+0x180>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <GPIO_voidSetPinDirection+0x28>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d03a      	beq.n	8000870 <GPIO_voidSetPinDirection+0x9c>
						copy_u8PIN = copy_u8PIN -8;
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
						}
						break;
			default :break;
 80007fa:	e0ab      	b.n	8000954 <GPIO_voidSetPinDirection+0x180>
						if (copy_u8PIN <= 7)
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d817      	bhi.n	8000832 <GPIO_voidSetPinDirection+0x5e>
						GPIOA_CRL &=~((0b1111)      << (copy_u8PIN * 4));
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <GPIO_voidSetPinDirection+0x198>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	79ba      	ldrb	r2, [r7, #6]
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	210f      	movs	r1, #15
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	43d2      	mvns	r2, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a55      	ldr	r2, [pc, #340]	@ (800096c <GPIO_voidSetPinDirection+0x198>)
 8000816:	400b      	ands	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
						GPIOA_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4));
 800081a:	4b54      	ldr	r3, [pc, #336]	@ (800096c <GPIO_voidSetPinDirection+0x198>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7979      	ldrb	r1, [r7, #5]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a50      	ldr	r2, [pc, #320]	@ (800096c <GPIO_voidSetPinDirection+0x198>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]
						break;
 8000830:	e092      	b.n	8000958 <GPIO_voidSetPinDirection+0x184>
						else if (copy_u8PIN <= 15)
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	f200 808f 	bhi.w	8000958 <GPIO_voidSetPinDirection+0x184>
						copy_u8PIN = copy_u8PIN -8;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	3b08      	subs	r3, #8
 800083e:	71bb      	strb	r3, [r7, #6]
                        GPIOA_CRH &=~((0b1111)      << (copy_u8PIN * 4)); 
 8000840:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <GPIO_voidSetPinDirection+0x19c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	79ba      	ldrb	r2, [r7, #6]
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	210f      	movs	r1, #15
 800084a:	fa01 f202 	lsl.w	r2, r1, r2
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a47      	ldr	r2, [pc, #284]	@ (8000970 <GPIO_voidSetPinDirection+0x19c>)
 8000854:	400b      	ands	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
						GPIOA_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4));
 8000858:	4b45      	ldr	r3, [pc, #276]	@ (8000970 <GPIO_voidSetPinDirection+0x19c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7979      	ldrb	r1, [r7, #5]
 800085e:	79ba      	ldrb	r2, [r7, #6]
 8000860:	0092      	lsls	r2, r2, #2
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a41      	ldr	r2, [pc, #260]	@ (8000970 <GPIO_voidSetPinDirection+0x19c>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6013      	str	r3, [r2, #0]
						break;
 800086e:	e073      	b.n	8000958 <GPIO_voidSetPinDirection+0x184>
						if (copy_u8PIN <= 7)
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	2b07      	cmp	r3, #7
 8000874:	d817      	bhi.n	80008a6 <GPIO_voidSetPinDirection+0xd2>
						GPIOB_CRL &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 8000876:	4b3f      	ldr	r3, [pc, #252]	@ (8000974 <GPIO_voidSetPinDirection+0x1a0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	210f      	movs	r1, #15
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	43d2      	mvns	r2, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a3a      	ldr	r2, [pc, #232]	@ (8000974 <GPIO_voidSetPinDirection+0x1a0>)
 800088a:	400b      	ands	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
						GPIOB_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <GPIO_voidSetPinDirection+0x1a0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7979      	ldrb	r1, [r7, #5]
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	0092      	lsls	r2, r2, #2
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a35      	ldr	r2, [pc, #212]	@ (8000974 <GPIO_voidSetPinDirection+0x1a0>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
						break;
 80008a4:	e05a      	b.n	800095c <GPIO_voidSetPinDirection+0x188>
						else if (copy_u8PIN <= 15)
 80008a6:	79bb      	ldrb	r3, [r7, #6]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d857      	bhi.n	800095c <GPIO_voidSetPinDirection+0x188>
						copy_u8PIN = copy_u8PIN -8;
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	3b08      	subs	r3, #8
 80008b0:	71bb      	strb	r3, [r7, #6]
                        GPIOB_CRH &=~((0b1111)      << ((copy_u8PIN) * 4)); //reset GPIO_CRL FOR ANYPIN
 80008b2:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <GPIO_voidSetPinDirection+0x1a4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	210f      	movs	r1, #15
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <GPIO_voidSetPinDirection+0x1a4>)
 80008c6:	400b      	ands	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
						GPIOB_CRH |= ((copy_u8Mode) << ((copy_u8PIN) * 4)); //write mode  FOR ANYPIN
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <GPIO_voidSetPinDirection+0x1a4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	7979      	ldrb	r1, [r7, #5]
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a27      	ldr	r2, [pc, #156]	@ (8000978 <GPIO_voidSetPinDirection+0x1a4>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
						break;
 80008e0:	e03c      	b.n	800095c <GPIO_voidSetPinDirection+0x188>
						if (copy_u8PIN <= 7)
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d817      	bhi.n	8000918 <GPIO_voidSetPinDirection+0x144>
						GPIOC_CRL &=~((0b1111)      << (copy_u8PIN * 4));//reset GPIO_CRL FOR ANYPIN
 80008e8:	4b24      	ldr	r3, [pc, #144]	@ (800097c <GPIO_voidSetPinDirection+0x1a8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	0092      	lsls	r2, r2, #2
 80008f0:	210f      	movs	r1, #15
 80008f2:	fa01 f202 	lsl.w	r2, r1, r2
 80008f6:	43d2      	mvns	r2, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a20      	ldr	r2, [pc, #128]	@ (800097c <GPIO_voidSetPinDirection+0x1a8>)
 80008fc:	400b      	ands	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
						GPIOC_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <GPIO_voidSetPinDirection+0x1a8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	7979      	ldrb	r1, [r7, #5]
 8000906:	79ba      	ldrb	r2, [r7, #6]
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <GPIO_voidSetPinDirection+0x1a8>)
 8000912:	430b      	orrs	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
						break;
 8000916:	e023      	b.n	8000960 <GPIO_voidSetPinDirection+0x18c>
						else if (copy_u8PIN <= 15)
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d820      	bhi.n	8000960 <GPIO_voidSetPinDirection+0x18c>
						copy_u8PIN = copy_u8PIN -8;
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	3b08      	subs	r3, #8
 8000922:	71bb      	strb	r3, [r7, #6]
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 8000924:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <GPIO_voidSetPinDirection+0x1ac>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	79ba      	ldrb	r2, [r7, #6]
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	210f      	movs	r1, #15
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <GPIO_voidSetPinDirection+0x1ac>)
 8000938:	400b      	ands	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <GPIO_voidSetPinDirection+0x1ac>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	7979      	ldrb	r1, [r7, #5]
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	4611      	mov	r1, r2
 800094c:	4a0c      	ldr	r2, [pc, #48]	@ (8000980 <GPIO_voidSetPinDirection+0x1ac>)
 800094e:	430b      	orrs	r3, r1
 8000950:	6013      	str	r3, [r2, #0]
						break;
 8000952:	e005      	b.n	8000960 <GPIO_voidSetPinDirection+0x18c>
			default :break;
 8000954:	bf00      	nop
 8000956:	e004      	b.n	8000962 <GPIO_voidSetPinDirection+0x18e>
						break;
 8000958:	bf00      	nop
 800095a:	e002      	b.n	8000962 <GPIO_voidSetPinDirection+0x18e>
						break;
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <GPIO_voidSetPinDirection+0x18e>
						break;
 8000960:	bf00      	nop
			
			}
			
		
	}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40010800 	.word	0x40010800
 8000970:	40010804 	.word	0x40010804
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40010c04 	.word	0x40010c04
 800097c:	40011000 	.word	0x40011000
 8000980:	40011004 	.word	0x40011004

08000984 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Value)
	{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	460b      	mov	r3, r1
 8000990:	71bb      	strb	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	717b      	strb	r3, [r7, #5]
	switch (copy_u8PORT)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d02a      	beq.n	80009f2 <GPIO_voidSetPinValue+0x6e>
 800099c:	2b02      	cmp	r3, #2
 800099e:	dc3a      	bgt.n	8000a16 <GPIO_voidSetPinValue+0x92>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <GPIO_voidSetPinValue+0x26>
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d012      	beq.n	80009ce <GPIO_voidSetPinValue+0x4a>
							//CLR_BIT(GPIOC_ODR ,copy_u8PIN);
							GPIOC_BRR = (1<<copy_u8PIN);
						}
						break;							
			
			default :break;
 80009a8:	e035      	b.n	8000a16 <GPIO_voidSetPinValue+0x92>
						if (copy_u8Value == GPIO_HIGH)
 80009aa:	797b      	ldrb	r3, [r7, #5]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d105      	bne.n	80009bc <GPIO_voidSetPinValue+0x38>
							GPIOA_BSR = (1<<copy_u8PIN);
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	2201      	movs	r2, #1
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <GPIO_voidSetPinValue+0xac>)
 80009b8:	601a      	str	r2, [r3, #0]
						break;
 80009ba:	e02e      	b.n	8000a1a <GPIO_voidSetPinValue+0x96>
						else if (copy_u8Value == GPIO_LOW)
 80009bc:	797b      	ldrb	r3, [r7, #5]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d12b      	bne.n	8000a1a <GPIO_voidSetPinValue+0x96>
							GPIOA_BRR = (1<<copy_u8PIN);
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	2201      	movs	r2, #1
 80009c6:	409a      	lsls	r2, r3
 80009c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <GPIO_voidSetPinValue+0xb0>)
 80009ca:	601a      	str	r2, [r3, #0]
						break;
 80009cc:	e025      	b.n	8000a1a <GPIO_voidSetPinValue+0x96>
						if (copy_u8Value == GPIO_HIGH)
 80009ce:	797b      	ldrb	r3, [r7, #5]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d105      	bne.n	80009e0 <GPIO_voidSetPinValue+0x5c>
							GPIOB_BSR = (1<<copy_u8PIN);
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2201      	movs	r2, #1
 80009d8:	409a      	lsls	r2, r3
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <GPIO_voidSetPinValue+0xb4>)
 80009dc:	601a      	str	r2, [r3, #0]
						break;	
 80009de:	e01e      	b.n	8000a1e <GPIO_voidSetPinValue+0x9a>
						else if (copy_u8Value == GPIO_LOW)
 80009e0:	797b      	ldrb	r3, [r7, #5]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d11b      	bne.n	8000a1e <GPIO_voidSetPinValue+0x9a>
							GPIOB_BRR = (1<<copy_u8PIN);
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2201      	movs	r2, #1
 80009ea:	409a      	lsls	r2, r3
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <GPIO_voidSetPinValue+0xb8>)
 80009ee:	601a      	str	r2, [r3, #0]
						break;	
 80009f0:	e015      	b.n	8000a1e <GPIO_voidSetPinValue+0x9a>
						if (copy_u8Value == GPIO_HIGH)
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d105      	bne.n	8000a04 <GPIO_voidSetPinValue+0x80>
							GPIOC_BSR = (1<<copy_u8PIN);
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2201      	movs	r2, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <GPIO_voidSetPinValue+0xbc>)
 8000a00:	601a      	str	r2, [r3, #0]
						break;							
 8000a02:	e00e      	b.n	8000a22 <GPIO_voidSetPinValue+0x9e>
						else if (copy_u8Value == GPIO_LOW)
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10b      	bne.n	8000a22 <GPIO_voidSetPinValue+0x9e>
							GPIOC_BRR = (1<<copy_u8PIN);
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <GPIO_voidSetPinValue+0xc0>)
 8000a12:	601a      	str	r2, [r3, #0]
						break;							
 8000a14:	e005      	b.n	8000a22 <GPIO_voidSetPinValue+0x9e>
			default :break;
 8000a16:	bf00      	nop
 8000a18:	e004      	b.n	8000a24 <GPIO_voidSetPinValue+0xa0>
						break;
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <GPIO_voidSetPinValue+0xa0>
						break;	
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <GPIO_voidSetPinValue+0xa0>
						break;							
 8000a22:	bf00      	nop
			}
			
	
	}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40010810 	.word	0x40010810
 8000a34:	40010814 	.word	0x40010814
 8000a38:	40010c10 	.word	0x40010c10
 8000a3c:	40010c14 	.word	0x40010c14
 8000a40:	40011010 	.word	0x40011010
 8000a44:	40011014 	.word	0x40011014

08000a48 <RCC_voidInitSysClock>:

#include "RCC_interface.h"  


void RCC_voidInitSysClock()
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0


	    // 1. Enable HSI if selected
	#if CLOCK_TYPE == RCC_HSI
	    RCC_CR |= (1 << RCC_CR_HSION);  // Enable HSI
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <RCC_voidInitSysClock+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <RCC_voidInitSysClock+0x2c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]
	    // Enable PLL
	    RCC_CR |= (1 << RCC_CR_PLLON);  // Enable PLL
	#endif

	    // 4. Set the main system clock source
	    RCC_CFGR &= ~(0x3 << RCC_CFGR_SW);  // Clear previous values
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <RCC_voidInitSysClock+0x30>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <RCC_voidInitSysClock+0x30>)
 8000a5e:	f023 0303 	bic.w	r3, r3, #3
 8000a62:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= (CLOCK_TYPE << RCC_CFGR_SW);  // Set main clock source
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <RCC_voidInitSysClock+0x30>)
 8000a66:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <RCC_voidInitSysClock+0x30>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40021004 	.word	0x40021004

08000a7c <RCC_voidEnableClock>:



void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusId)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d01c      	beq.n	8000acc <RCC_voidEnableClock+0x50>
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	dc25      	bgt.n	8000ae2 <RCC_voidEnableClock+0x66>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <RCC_voidEnableClock+0x24>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d00b      	beq.n	8000ab6 <RCC_voidEnableClock+0x3a>
        case RCC_APB2:
            RCC_APB2ENR |= (1 << Copy_u8PerId);
            break;

    }
}
 8000a9e:	e020      	b.n	8000ae2 <RCC_voidEnableClock+0x66>
            RCC_AHBENR |= (1 << Copy_u8PerId);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <RCC_voidEnableClock+0x70>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <RCC_voidEnableClock+0x70>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6013      	str	r3, [r2, #0]
            break;
 8000ab4:	e015      	b.n	8000ae2 <RCC_voidEnableClock+0x66>
            RCC_APB1ENR |= (1 << Copy_u8PerId);
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <RCC_voidEnableClock+0x74>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	79ba      	ldrb	r2, [r7, #6]
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <RCC_voidEnableClock+0x74>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6013      	str	r3, [r2, #0]
            break;
 8000aca:	e00a      	b.n	8000ae2 <RCC_voidEnableClock+0x66>
            RCC_APB2ENR |= (1 << Copy_u8PerId);
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <RCC_voidEnableClock+0x78>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	79ba      	ldrb	r2, [r7, #6]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <RCC_voidEnableClock+0x78>)
 8000adc:	430b      	orrs	r3, r1
 8000ade:	6013      	str	r3, [r2, #0]
            break;
 8000ae0:	bf00      	nop
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021014 	.word	0x40021014
 8000af0:	4002101c 	.word	0x4002101c
 8000af4:	40021018 	.word	0x40021018

08000af8 <SPI_Init>:


#include "SPI_interface.h"
#include "../../MCAL/GPIO/GPIO_interface.h"

void SPI_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
   #if (SPI_MODE == SPI_MODE_MASTER)
        SPI1->CR1 |= (1 << SPI_CR1_MSTR); // MASTER mode
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <SPI_Init+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <SPI_Init+0x68>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6013      	str	r3, [r2, #0]

    	GPIO_voidSetPinDirection(SS1_PIN  ,OUTPUT_SPEED_10MHZ_PP);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fe61 	bl	80007d4 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MOSI ,OUTPUT_SPEED_10MHZ_AFPP);
 8000b12:	2209      	movs	r2, #9
 8000b14:	2107      	movs	r1, #7
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fe5c 	bl	80007d4 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MISO ,INPUT_FLOUTING);
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	2106      	movs	r1, #6
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fe57 	bl	80007d4 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_SCK  ,OUTPUT_SPEED_10MHZ_AFPP);
 8000b26:	2209      	movs	r2, #9
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fe52 	bl	80007d4 <GPIO_voidSetPinDirection>
    	GPIO_voidSetPinDirection(SPI_MISO ,OUTPUT_SPEED_10MHZ_AFPP);
    	GPIO_voidSetPinDirection(SPI_SCK  ,INPUT_FLOUTING);

	#endif

    SPI1->CR1 |= (SPI_CLOCK_PHASE    << SPI_CR1_CPHA);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <SPI_Init+0x68>)
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <SPI_Init+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_CLOCK_POLARITY << SPI_CR1_CPOL);
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <SPI_Init+0x68>)
 8000b3a:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <SPI_Init+0x68>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_SSM            << SPI_CR1_SSI);
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <SPI_Init+0x68>)
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <SPI_Init+0x68>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_SSM            << SPI_CR1_SSM);
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <SPI_Init+0x68>)
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SPI_Init+0x68>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6013      	str	r3, [r2, #0]

    SPI1->CR1 |= (1 << SPI_CR1_SPE);
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <SPI_Init+0x68>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a02      	ldr	r2, [pc, #8]	@ (8000b60 <SPI_Init+0x68>)
 8000b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013000 	.word	0x40013000

08000b64 <SPI_Send>:

void SPI_Send(u8 data) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]

	while (!(SPI1->SR & (1 << SPI_SR_TXE)));
 8000b6e:	bf00      	nop
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SPI_Send+0x28>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0f9      	beq.n	8000b70 <SPI_Send+0xc>

	SPI1->DR = data;
 8000b7c:	4a03      	ldr	r2, [pc, #12]	@ (8000b8c <SPI_Send+0x28>)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	60d3      	str	r3, [r2, #12]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40013000 	.word	0x40013000

08000b90 <STK_voidInit>:
u8 STK_u8ModeOfInterval;




void STK_voidInit() {
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

    STK->CTRL &= ~(1 << STK_CTRL_ENABLE);
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <STK_voidInit+0x2c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <STK_voidInit+0x2c>)
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

    #if STK_CLK_SRC == STK_SRC_AHB
        STK->CTRL |= (1 << STK_CTRL_CLKSEL); // AHB
    #elif STK_CLK_SRC == STK_SRC_AHB_8
        STK->CTRL &= ~(1 << STK_CTRL_CLKSEL); //AHB/8
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <STK_voidInit+0x2c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <STK_voidInit+0x2c>)
 8000ba6:	f023 0304 	bic.w	r3, r3, #4
 8000baa:	6013      	str	r3, [r2, #0]
    #endif


    STK->VAL = 0;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <STK_voidInit+0x2c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <STK_delay>:




void STK_delay(u32 time, u32 unit) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]

	f32 ratio = STK_TIMER_FREQ / unit;  //TICKS = ( TIME IN SEC/ UNIT) * TIMER FREQ.
 8000bca:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <STK_delay+0x70>)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fb82 	bl	80002dc <__aeabi_ui2f>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60fb      	str	r3, [r7, #12]
	u32 ticks = time * ratio;
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb7d 	bl	80002dc <__aeabi_ui2f>
 8000be2:	4603      	mov	r3, r0
 8000be4:	68f9      	ldr	r1, [r7, #12]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fbd0 	bl	800038c <__aeabi_fmul>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd1c 	bl	800062c <__aeabi_f2uiz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60bb      	str	r3, [r7, #8]


    STK->LOAD = ticks & STK_LOAD_MASK;
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <STK_delay+0x74>)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000c00:	6053      	str	r3, [r2, #4]



    STK->CTRL |= (1 << STK_CTRL_ENABLE); //start timer
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <STK_delay+0x74>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <STK_delay+0x74>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]

    while (!(STK->CTRL & (1 << STK_CTRL_COUNTFLAG)));  //waiting flag
 8000c0e:	bf00      	nop
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <STK_delay+0x74>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f9      	beq.n	8000c10 <STK_delay+0x50>

    STK->CTRL &= ~(1 << STK_CTRL_ENABLE);  //stop timer
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <STK_delay+0x74>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <STK_delay+0x74>)
 8000c22:	f023 0301 	bic.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	000f4240 	.word	0x000f4240
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <SysTick_Handler>:

    return time;
}


void SysTick_Handler(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

    STK_CallBack();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <SysTick_Handler+0x30>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4798      	blx	r3


    volatile u32 temp = STK->CTRL; //flag clear
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <SysTick_Handler+0x34>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	607b      	str	r3, [r7, #4]

    if (STK_u8ModeOfInterval == STK_ONEC) {
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <SysTick_Handler+0x38>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <SysTick_Handler+0x26>
        STK->CTRL &= ~(1 << STK_CTRL_ENABLE);
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SysTick_Handler+0x34>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SysTick_Handler+0x34>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6013      	str	r3, [r2, #0]
    }
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000001c 	.word	0x2000001c
 8000c6c:	e000e010 	.word	0xe000e010
 8000c70:	20000020 	.word	0x20000020

08000c74 <main>:
#include "MCAL/SPI/SPI_interface.h"
#include "HAL/TFT/TFT_interface.h"
#include "image.h"

void main()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8000c78:	f7ff fee6 	bl	8000a48 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2,RCC_GPIOA);
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff fefc 	bl	8000a7c <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2,RCC_SPI1);
 8000c84:	210c      	movs	r1, #12
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fef8 	bl	8000a7c <RCC_voidEnableClock>

	GPIO_voidSetPinDirection(GPIOA,PIN1,OUTPUT_SPEED_2MHZ_PP);    /*TFT CMD_DATA*/
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd9f 	bl	80007d4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN2,OUTPUT_SPEED_2MHZ_PP);    /*TFT RST*/
 8000c96:	2202      	movs	r2, #2
 8000c98:	2102      	movs	r1, #2
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fd9a 	bl	80007d4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN5,OUTPUT_SPEED_10MHZ_AFPP); /*TFT CLK*/
 8000ca0:	2209      	movs	r2, #9
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd95 	bl	80007d4 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA,PIN7,OUTPUT_SPEED_10MHZ_AFPP); /*TFT MOSI*/
 8000caa:	2209      	movs	r2, #9
 8000cac:	2107      	movs	r1, #7
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fd90 	bl	80007d4 <GPIO_voidSetPinDirection>


	STK_voidInit();
 8000cb4:	f7ff ff6c 	bl	8000b90 <STK_voidInit>
	SPI_Init();
 8000cb8:	f7ff ff1e 	bl	8000af8 <SPI_Init>
	TFT_voidInit();
 8000cbc:	f7ff fcd6 	bl	800066c <TFT_voidInit>

	TFT_voidDisplayImage(arr);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <main+0x58>)
 8000cc2:	f7ff fd19 	bl	80006f8 <TFT_voidDisplayImage>
	//TFT_voidDrawLetter(40,50,letters['M'],0x0000);
	//TFT_voidDrawString(70,10,"ahmed",TFT_RED);
	/*

*/
	while(1)
 8000cc6:	bf00      	nop
 8000cc8:	e7fd      	b.n	8000cc6 <main+0x52>
 8000cca:	bf00      	nop
 8000ccc:	08000d84 	.word	0x08000d84

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f000 f811 	bl	8000d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff ffb7 	bl	8000c74 <main>

08000d06 <LoopForever>:

LoopForever:
  b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d14:	08008d44 	.word	0x08008d44
  ldr r2, =_sbss
 8000d18:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d1c:	20000024 	.word	0x20000024

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <__libc_init_array>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	2600      	movs	r6, #0
 8000d28:	4d0c      	ldr	r5, [pc, #48]	@ (8000d5c <__libc_init_array+0x38>)
 8000d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8000d60 <__libc_init_array+0x3c>)
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	10a4      	asrs	r4, r4, #2
 8000d30:	42a6      	cmp	r6, r4
 8000d32:	d109      	bne.n	8000d48 <__libc_init_array+0x24>
 8000d34:	f000 f81a 	bl	8000d6c <_init>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	4d0a      	ldr	r5, [pc, #40]	@ (8000d64 <__libc_init_array+0x40>)
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <__libc_init_array+0x44>)
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	10a4      	asrs	r4, r4, #2
 8000d42:	42a6      	cmp	r6, r4
 8000d44:	d105      	bne.n	8000d52 <__libc_init_array+0x2e>
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4c:	4798      	blx	r3
 8000d4e:	3601      	adds	r6, #1
 8000d50:	e7ee      	b.n	8000d30 <__libc_init_array+0xc>
 8000d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d56:	4798      	blx	r3
 8000d58:	3601      	adds	r6, #1
 8000d5a:	e7f2      	b.n	8000d42 <__libc_init_array+0x1e>
 8000d5c:	08008d3c 	.word	0x08008d3c
 8000d60:	08008d3c 	.word	0x08008d3c
 8000d64:	08008d3c 	.word	0x08008d3c
 8000d68:	08008d40 	.word	0x08008d40

08000d6c <_init>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr

08000d78 <_fini>:
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	bf00      	nop
 8000d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7e:	bc08      	pop	{r3}
 8000d80:	469e      	mov	lr, r3
 8000d82:	4770      	bx	lr
